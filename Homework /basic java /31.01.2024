/* я хотела более менее подробно расписать, чтобы мне самой было понятно, что я делаю и зачем (если, например, когда-нибудь захочу
вернуться к этой работе) пока что не справилась с сортировкой, но сделала линейный и бинарный поиск для программы */

public class Search {
    public static void main(String[] args) {
        int[] sortedData = {1, 2, 3, 5, 8, 13, 21, 34}; // массив для работы с линейным и двоичным поиском
        // int[] notSortedData = {5, 8, 13, 2, 21, 34, 1, 3}; // массив для сортировки (пока что не используется нигде в программе)
        int targetNumber = 12; // число, которое нужно найти в массиве
        
        int linearResult = SearchLinear(sortedData, targetNumber); // прогоняю массив по методу SearchLinear и вывожу результат
        int M = SearchBinary(sortedData, targetNumber);  // прогоняю массив по методу SearchLinear и вывожу результат

        // прогоняю результат поиска через метод checkIfArrayOutOfBounds, чтобы проверить результаты вывода методов
        CheckIfArrayOutOfBounds(linearResult);
        CheckIfArrayOutOfBounds(M);
        
    }

    public static int SearchLinear(int[] sortedData, int targetNumber){
        // метод для линейного поиска номера ячейки
        // цикл, который с каждым новым оборотом переходит на новую ячейку с помощью i++
        for (int i = 0; i < sortedData.length; i++ )
            /* если значение в выбранной ячейке соответсвует числу, которое мы пытаемся найти,
            // то цикл завершается*/
            if (sortedData[i] == targetNumber){
             return i;}
        /* если искомого числа не существует в этом массиве, то метод возращает -1,
        что является невозможным числом для обозначения ячейки метода*/
        return -1;
    }

//    public static boolean DoesArrayContainNumber (int[] sortedData, int targetNumber){
//        // метод для подтверждения, что число есть в массиве
//        // !!!!! метод-рудимент, т.к. я заменила его на CheckIfArrayOutOfBounds, т.к. тот в теории
//        // затрачивает меньше памяти (но это не точно, у меня был какой-то алгоритм и я его придерживалась)
//        
//        // использую интегральный for, потому что a) легче b)короче c) в этом методе не нужен i++
//        for (int number : sortedData) {
//            // если искомое число существует в массиве, то цикл заканчивается, выводя true
//            if (number == targetNumber) {
//                return true;
//            }
//        }
//        // если искомое число не существует в массиве, то цикл заканчивается, выводя false
//        return false;
//    }

    public static int SearchBinary (int[] sortedData, int targetNumber) {
        // метод для бинарного поиска
        // заявляю left, чтобы использовать в кач-ве обозначения левого конца/части массива
        int left = 0;
        // заявляю right, чтобы использовать в кач-ве обозначения правого конца/части массива
        // вычисляю от этого числа 1, т.к. sortedData.length подсчитывает массивы, начиная с 1, а не с 0
        int right = sortedData.length - 1;

        // создаю цикл while, который будет делить массив на нужную нам половину
        // массив работает, пока сам себя не вычтет (ака одна из сторон не наложится на другую
        // при прибавлении/вычитании в дальнейшем)
        while (left <= right) {
            // вычисляю середину массива по формуле
            int middle = (left + (right - left) / 2);

            /* ввожу в метод if для определния "область поиска"
            (ака, какую из сторон после разделения на половину дожна использовать программа)*/

            if (sortedData[middle] == targetNumber) {
                return middle;
                /* если число, которое мы хотим найти в массиве находится в ячейке в середине, то цикл
                заканчивается, выводя в результат номер ячейки, в которой находится массив */
            } if (sortedData[middle] < targetNumber) {
                left = middle + 1;
                /* если число, которое находится в ячейке в середине (M) меньше искомого числа, то
                метод меняет значение левой стороны, чтобы в будущем первый if игнорировалевую сторону */
            } else {
                right = middle - 1;
                /* в любом другом случае (т.е. если число в ячейке M больше искомого числа) метод меняет
                значение правой стороны, чтобы в будущем первый if игнорировал эту сторону */
            }
        }
        /* если метод не находит результат, который смог бы вывести, а условие left <= right не выполняется, то
        метод возвращает число -1, которое является невозможным, т.к. у массива не может быть отрицательных значений*/
        return -1;
    }

    public static void CheckIfArrayOutOfBounds (int checkResult){
        if (checkResult == -1) {
            System.out.println("В массиве sortedData отсутствует искомое Вами число.");
            System.exit(-1);
        } else {
            System.out.println("В массиве sortedData ячейка с искомыв Вами числом является " + checkResult + "-й по счёту");
        }
    }

}
